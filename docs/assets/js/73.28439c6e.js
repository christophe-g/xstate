(window.webpackJsonp=window.webpackJsonp||[]).push([[73],{558:function(t,e,n){"use strict";n.r(e);var s=n(45),a=Object(s.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"xstate-svelte"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#xstate-svelte"}},[t._v("#")]),t._v(" @xstate/svelte")]),t._v(" "),n("p",[t._v("The "),n("a",{attrs:{href:"https://github.com/statelyai/xstate/tree/main/packages/xstate-svelte",target:"_blank",rel:"noopener noreferrer"}},[t._v("@xstate/svelte package"),n("OutboundLink")],1),t._v(" contains utilities for using "),n("a",{attrs:{href:"https://github.com/statelyai/xstate",target:"_blank",rel:"noopener noreferrer"}},[t._v("XState"),n("OutboundLink")],1),t._v(" with "),n("a",{attrs:{href:"https://github.com/sveltejs/svelte",target:"_blank",rel:"noopener noreferrer"}},[t._v("Svelte"),n("OutboundLink")],1),t._v(".")]),t._v(" "),n("h2",{attrs:{id:"quick-start"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#quick-start"}},[t._v("#")]),t._v(" Quick Start")]),t._v(" "),n("ol",[n("li",[t._v("Install "),n("code",[t._v("xstate")]),t._v(" and "),n("code",[t._v("@xstate/svelte")]),t._v(":")])]),t._v(" "),n("div",{staticClass:"language-bash extra-class"},[n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" i xstate @xstate/svelte\n")])])]),n("p",[n("strong",[t._v("Via CDN")])]),t._v(" "),n("div",{staticClass:"language-html extra-class"},[n("pre",{pre:!0,attrs:{class:"language-html"}},[n("code",[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("script")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("src")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("https://unpkg.com/@xstate/svelte/dist/xstate-svelte.min.js"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),n("span",{pre:!0,attrs:{class:"token script"}}),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("script")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),n("p",[t._v("By using the global variable "),n("code",[t._v("XStateSvelte")])]),t._v(" "),n("ol",{attrs:{start:"2"}},[n("li",[t._v("Import "),n("code",[t._v("useMachine")])])]),t._v(" "),n("div",{staticClass:"language-svelte extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("<script>\n  import { useMachine } from '@xstate/svelte';\n  import { createMachine } from 'xstate';\n\n  const toggleMachine = createMachine({\n    id: 'toggle',\n    initial: 'inactive',\n    states: {\n      inactive: {\n        on: { TOGGLE: 'active' }\n      },\n      active: {\n        on: { TOGGLE: 'inactive' }\n      }\n    }\n  });\n\n  const { state, send } = useMachine(toggleMachine);\n<\/script>\n\n<button on:click={() => send('TOGGLE')}>\n  {$state.value === 'inactive'\n    ? 'Click to activate'\n    : 'Active! Click to deactivate'}\n</button>\n")])])]),n("h2",{attrs:{id:"api"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#api"}},[t._v("#")]),t._v(" API")]),t._v(" "),n("h3",{attrs:{id:"usemachine-machine-options"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#usemachine-machine-options"}},[t._v("#")]),t._v(" "),n("code",[t._v("useMachine(machine, options?)")])]),t._v(" "),n("p",[t._v("A function that interprets the given "),n("code",[t._v("machine")]),t._v(" and starts a service that runs for the lifetime of the component.")]),t._v(" "),n("p",[n("strong",[t._v("Arguments")])]),t._v(" "),n("ul",[n("li",[n("code",[t._v("machine")]),t._v(" - An "),n("a",{attrs:{href:"https://xstate.js.org/docs/guides/machines.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("XState machine"),n("OutboundLink")],1),t._v(".")]),t._v(" "),n("li",[n("code",[t._v("options")]),t._v(" (optional) - "),n("a",{attrs:{href:"https://xstate.js.org/docs/guides/interpretation.html#options",target:"_blank",rel:"noopener noreferrer"}},[t._v("Interpreter options"),n("OutboundLink")],1),t._v(" OR one of the following Machine Config options: "),n("code",[t._v("guards")]),t._v(", "),n("code",[t._v("actions")]),t._v(", "),n("code",[t._v("activities")]),t._v(", "),n("code",[t._v("services")]),t._v(", "),n("code",[t._v("delays")]),t._v(", "),n("code",[t._v("immediate")]),t._v(", "),n("code",[t._v("context")]),t._v(", or "),n("code",[t._v("state")]),t._v(".")])]),t._v(" "),n("p",[n("strong",[t._v("Returns")]),t._v(" "),n("code",[t._v("{ state, send, service}")]),t._v(":")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("state")]),t._v(" - A "),n("a",{attrs:{href:"https://svelte.dev/docs#svelte_store",target:"_blank",rel:"noopener noreferrer"}},[t._v("Svelte store"),n("OutboundLink")],1),t._v(" representing the current state of the machine as an XState "),n("code",[t._v("State")]),t._v(" object. You should reference the store value by prefixing with "),n("code",[t._v("$")]),t._v(" i.e. "),n("code",[t._v("$state")]),t._v(".")]),t._v(" "),n("li",[n("code",[t._v("send")]),t._v(" - A function that sends events to the running service.")]),t._v(" "),n("li",[n("code",[t._v("service")]),t._v(" - The created service.")])]),t._v(" "),n("h3",{attrs:{id:"useselector-actor-selector-compare-getsnapshot"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#useselector-actor-selector-compare-getsnapshot"}},[t._v("#")]),t._v(" "),n("code",[t._v("useSelector(actor, selector, compare?, getSnapshot?)")])]),t._v(" "),n("p",[t._v("A function that returns "),n("a",{attrs:{href:"https://svelte.dev/docs#svelte_store",target:"_blank",rel:"noopener noreferrer"}},[t._v("Svelte store"),n("OutboundLink")],1),t._v(" representing the selected value from the snapshot of an "),n("code",[t._v("actor")]),t._v(", such as a service. The store will only be updated when the selected value changes, as determined by the optional "),n("code",[t._v("compare")]),t._v(" function.")]),t._v(" "),n("p",[n("strong",[t._v("Arguments")])]),t._v(" "),n("ul",[n("li",[n("code",[t._v("actor")]),t._v(" - a service or an actor-like object that contains "),n("code",[t._v(".send(...)")]),t._v(" and "),n("code",[t._v(".subscribe(...)")]),t._v(" methods.")]),t._v(" "),n("li",[n("code",[t._v("selector")]),t._v(' - a function that takes in an actor\'s "current state" (snapshot) as an argument and returns the desired selected value.')]),t._v(" "),n("li",[n("code",[t._v("compare")]),t._v(" (optional) - a function that determines if the current selected value is the same as the previous selected value.")])]),t._v(" "),n("p",[n("strong",[t._v("Example")])]),t._v(" "),n("div",{staticClass:"language-svelte extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("<script lang=\"ts\">\n  import { interpret } from 'xstate';\n  import { createModel } from 'xstate/lib/model';\n  import { useSelector } from '../src';\n\n  const model = createModel(\n    {\n      count: 0,\n      anotherCount: 0\n    },\n    {\n      events: {\n        INCREMENT: () => ({}),\n        INCREMENT_ANOTHER: () => ({})\n      }\n    }\n  );\n\n  const machine = model.createMachine({\n    initial: 'idle',\n    context: model.initialContext,\n    states: {\n      idle: {\n        on: {\n          INCREMENT: {\n            actions: model.assign({ count: ({ count }) => count + 1 })\n          },\n          INCREMENT_ANOTHER: {\n            actions: model.assign({\n              anotherCount: ({ anotherCount }) => anotherCount + 1\n            })\n          }\n        }\n      }\n    }\n  });\n\n  const service = interpret(machine).start();\n\n  const count = useSelector(service, (state) => state.context.count);\n\n  let withSelector = 0;\n  $: $count && withSelector++;\n  let withoutSelector = 0;\n  $: $service.context.count && withoutSelector++;\n<\/script>\n\n<button data-testid=\"count\" on:click={() => service.send({type:'INCREMENT'})}\n  >Increment count</button\n>\n<button data-testid=\"another\" on:click={() => service.send({type:'INCREMENT_ANOTHER'})}\n  >Increment another count</button\n>\n\n<div data-testid=\"withSelector\">{withSelector}</div>\n<div data-testid=\"withoutSelector\">{withoutSelector}</div>\n")])])]),n("h2",{attrs:{id:"configuring-machines"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#configuring-machines"}},[t._v("#")]),t._v(" Configuring Machines")]),t._v(" "),n("p",[t._v("Existing machines can be configured by passing the machine options as the 2nd argument of "),n("code",[t._v("useMachine(machine, options)")]),t._v(".")]),t._v(" "),n("p",[t._v("Example: the "),n("code",[t._v("'fetchData'")]),t._v(" service and "),n("code",[t._v("'notifySuccess'")]),t._v(" action are both configurable:")]),t._v(" "),n("div",{staticClass:"language-svelte extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("<script>\n  import { useMachine } from '@xstate/svelte';\n  import { createMachine, assign } from 'xstate';\n\n  const fetchMachine = createMachine({\n    id: 'fetch',\n    initial: 'idle',\n    context: {\n      data: undefined,\n      error: undefined\n    },\n    states: {\n      idle: {\n        on: { FETCH: 'loading' }\n      },\n      loading: {\n        invoke: {\n          src: 'fetchData',\n          onDone: {\n            target: 'success',\n            actions: assign({\n              data: (_, event) => event.data\n            })\n          },\n          onError: {\n            target: 'failure',\n            actions: assign({\n              error: (_, event) => event.data\n            })\n          }\n        }\n      },\n      success: {\n        entry: 'notifySuccess',\n        type: 'final'\n      },\n      failure: {\n        on: {\n          RETRY: 'loading'\n        }\n      }\n    }\n  });\n\n  const onResolve = (data) => {\n    // Do something with data\n  };\n\n  const { state, send } = useMachine(fetchMachine, {\n    actions: {\n      notifySuccess: (context) => onResolve(context.data)\n    },\n    services: {\n      fetchData: (_, event) =>\n        fetch(`some/api/${event.query}`).then((res) => res.json())\n    }\n  });\n<\/script>\n\n{#if $state.value === 'idle'}\n  <button on:click={() => send({ type: 'FETCH', query: 'something' })}>\n    Search for something\n  </button>\n{:else if $state.value === 'loading'}\n  <div>Searching...</div>\n{:else if $state.value === 'success'}\n  <div>Success! Data: {$state.context.data}</div>\n{:else if $state.value === 'failure'}\n  <p>{$state.context.error.message}</p>\n  <button on:click={() => send('RETRY')}>Retry</button>\n{/if}\n")])])]),n("h2",{attrs:{id:"matching-states"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#matching-states"}},[t._v("#")]),t._v(" Matching States")]),t._v(" "),n("p",[t._v("When using "),n("a",{attrs:{href:"https://xstate.js.org/docs/guides/hierarchical.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("hierarchical"),n("OutboundLink")],1),t._v(" and "),n("a",{attrs:{href:"https://xstate.js.org/docs/guides/parallel.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("parallel"),n("OutboundLink")],1),t._v(" machines, the state values will be objects, not strings. In this case, it is best to use "),n("a",{attrs:{href:"https://xstate.js.org/docs/guides/states.html#state-methods-and-properties",target:"_blank",rel:"noopener noreferrer"}},[n("code",[t._v("state.matches(...)")]),n("OutboundLink")],1),t._v(".")]),t._v(" "),n("div",{staticClass:"language-svelte extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("{#if $state.matches('idle')}\n  //\n{:else if $state.matches({ loading: 'user' })}\n  //\n{:else if $state.matches({ loading: 'friends' })}\n  //\n{/if}\n")])])]),n("h2",{attrs:{id:"persisted-and-rehydrated-state"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#persisted-and-rehydrated-state"}},[t._v("#")]),t._v(" Persisted and Rehydrated State")]),t._v(" "),n("p",[t._v("You can persist and rehydrate state with "),n("code",[t._v("useMachine(...)")]),t._v(" via "),n("code",[t._v("options.state")]),t._v(":")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Get the persisted state config object from somewhere, e.g. localStorage")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" persistedState "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JSON")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("parse")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  localStorage"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getItem")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'some-persisted-state-key'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" state"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" send "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("useMachine")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("someMachine"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  state"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" persistedState\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// state will initially be that persisted state, not the machine's initialState")]),t._v("\n")])])]),n("h2",{attrs:{id:"services"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#services"}},[t._v("#")]),t._v(" Services")]),t._v(" "),n("p",[n("code",[t._v("XState")]),t._v(" services implement the "),n("a",{attrs:{href:"https://svelte.dev/docs#Store_contract",target:"_blank",rel:"noopener noreferrer"}},[t._v("Svelte store contract"),n("OutboundLink")],1),t._v(". Existing services and spawned actors can therefore be accessed directly and subscriptions are handled automatically by prefixing the service name with "),n("code",[t._v("$")]),t._v(".")]),t._v(" "),n("p",[n("strong",[t._v("Example")])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// service.js")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" createMachine"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" interpret "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'xstate'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" toggleMachine "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("createMachine")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  id"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'toggle'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  initial"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'inactive'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  states"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    inactive"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      on"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("TOGGLE")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'active'")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    active"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      on"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("TOGGLE")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'inactive'")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" toggleService "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("interpret")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("toggleMachine"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("div",{staticClass:"language-svelte extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("// App.svelte\n\n<script>\n  import { toggleService } from './service';\n<\/script>\n\n<button on:click={() => toggleService.send({type:'TOGGLE'})}>\n  {$toggleService.value === 'inactive'\n    ? 'Click to activate'\n    : 'Active! Click to deactivate'}\n</button>\n")])])])])}),[],!1,null,null,null);e.default=a.exports}}]);